"""initial schema

Revision ID: f2ebf23dfc5d
Revises: 
Create Date: 2025-08-30 19:26:21.411941

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f2ebf23dfc5d'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('institution_types',
    sa.Column('InstitutionTypeId', sa.String(), nullable=False),
    sa.Column('InstitutionType', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('InstitutionTypeId')
    )
    op.create_table('users',
    sa.Column('UserId', sa.String(), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Email', sa.String(), nullable=False),
    sa.Column('Role', sa.String(), nullable=False),
    sa.Column('Password', sa.String(), nullable=False),
    sa.Column('CreatedAt', sa.DateTime(), nullable=False),
    sa.Column('UpdatedAt', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('UserId'),
    sa.UniqueConstraint('Email')
    )
    op.create_table('administrators',
    sa.Column('UserId', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['UserId'], ['users.UserId'], ),
    sa.PrimaryKeyConstraint('UserId')
    )
    op.create_table('visitors',
    sa.Column('UserId', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['UserId'], ['users.UserId'], ),
    sa.PrimaryKeyConstraint('UserId')
    )
    op.create_table('institutions',
    sa.Column('InstitutionId', sa.String(), nullable=False),
    sa.Column('InstitutionTypeId', sa.String(), nullable=True),
    sa.Column('AdministratorId', sa.String(), nullable=True),
    sa.Column('Name', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['AdministratorId'], ['administrators.UserId'], ),
    sa.ForeignKeyConstraint(['InstitutionTypeId'], ['institution_types.InstitutionTypeId'], ),
    sa.PrimaryKeyConstraint('InstitutionId')
    )
    op.create_table('branches',
    sa.Column('BranchId', sa.String(), nullable=False),
    sa.Column('InstitutionId', sa.String(), nullable=True),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Address', sa.String(), nullable=True),
    sa.Column('ServiceHours', sa.String(), nullable=True),
    sa.Column('ServiceDescription', sa.String(), nullable=True),
    sa.Column('Latitude', sa.Float(), nullable=True),
    sa.Column('Longitude', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['InstitutionId'], ['institutions.InstitutionId'], ),
    sa.PrimaryKeyConstraint('BranchId')
    )
    op.create_table('alert_preferences',
    sa.Column('AlertId', sa.String(), nullable=False),
    sa.Column('VisitorId', sa.String(), nullable=True),
    sa.Column('BranchId', sa.String(), nullable=True),
    sa.Column('CrowdThreshold', sa.Integer(), nullable=True),
    sa.Column('CreatedAt', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['BranchId'], ['branches.BranchId'], ),
    sa.ForeignKeyConstraint(['VisitorId'], ['visitors.UserId'], ),
    sa.PrimaryKeyConstraint('AlertId')
    )
    op.create_table('crowd_data',
    sa.Column('CrowdDataId', sa.String(), nullable=False),
    sa.Column('BranchId', sa.String(), nullable=True),
    sa.Column('Timestamp', sa.DateTime(), nullable=True),
    sa.Column('CurrentCrowdCount', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['BranchId'], ['branches.BranchId'], ),
    sa.PrimaryKeyConstraint('CrowdDataId')
    )
    op.create_table('favorite_institutions',
    sa.Column('FavoriteInstitutionId', sa.String(), nullable=False),
    sa.Column('VisitorId', sa.String(), nullable=True),
    sa.Column('BranchId', sa.String(), nullable=True),
    sa.Column('CreatedAt', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['BranchId'], ['branches.BranchId'], ),
    sa.ForeignKeyConstraint(['VisitorId'], ['visitors.UserId'], ),
    sa.PrimaryKeyConstraint('FavoriteInstitutionId')
    )
    op.create_table('operators',
    sa.Column('UserId', sa.String(), nullable=False),
    sa.Column('BranchId', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['BranchId'], ['branches.BranchId'], ),
    sa.ForeignKeyConstraint(['UserId'], ['users.UserId'], ),
    sa.PrimaryKeyConstraint('UserId', 'BranchId')
    )
    op.create_table('visitor_logs',
    sa.Column('VisitorLogId', sa.String(), nullable=False),
    sa.Column('VisitorId', sa.String(), nullable=True),
    sa.Column('BranchId', sa.String(), nullable=True),
    sa.Column('CheckInTime', sa.DateTime(), nullable=True),
    sa.Column('ServiceStartTime', sa.DateTime(), nullable=True),
    sa.Column('WaitTimeInMinutes', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['BranchId'], ['branches.BranchId'], ),
    sa.ForeignKeyConstraint(['VisitorId'], ['visitors.UserId'], ),
    sa.PrimaryKeyConstraint('VisitorLogId')
    )
    op.create_table('wait_time_predictions',
    sa.Column('WaitTimePredictionId', sa.String(), nullable=False),
    sa.Column('VisitorId', sa.String(), nullable=True),
    sa.Column('BranchId', sa.String(), nullable=True),
    sa.Column('VisitDate', sa.DateTime(), nullable=True),
    sa.Column('Accuracy', sa.Float(), nullable=True),
    sa.Column('PredictedAt', sa.DateTime(), nullable=True),
    sa.Column('ActualWaitTime', sa.Float(), nullable=True),
    sa.Column('PredictedWaitTime', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['BranchId'], ['branches.BranchId'], ),
    sa.ForeignKeyConstraint(['VisitorId'], ['visitors.UserId'], ),
    sa.PrimaryKeyConstraint('WaitTimePredictionId')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('wait_time_predictions')
    op.drop_table('visitor_logs')
    op.drop_table('operators')
    op.drop_table('favorite_institutions')
    op.drop_table('crowd_data')
    op.drop_table('alert_preferences')
    op.drop_table('branches')
    op.drop_table('institutions')
    op.drop_table('visitors')
    op.drop_table('administrators')
    op.drop_table('users')
    op.drop_table('institution_types')
    # ### end Alembic commands ###
